{"version":3,"sources":["Card.js","Cardlist.js","robot.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","style","width","height","alt","src","CardList","robots","cardComponent","map","user","i","key","username","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","overflowY","children","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MAceA,EAZJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACpB,OACI,yBAAKC,UAAU,mDAAmDC,MAAO,CAACC,MAAM,MAAMC,OAAO,SACzF,yBAAKC,IAAI,SAASC,IAAG,+BAA0BN,EAA1B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,MCYLQ,EAjBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACPC,EAAcD,EAAOE,KAAI,SAACC,EAAKC,GACjC,OACA,kBAAC,EAAD,CACAC,IAAKD,EACLZ,GAAIQ,EAAOI,GAAGZ,GACdF,KAAMU,EAAOI,GAAGd,KAChBC,MAAOS,EAAOI,GAAGb,WAIrB,OACI,6BACKU,IChBAD,EAAS,CACpB,CACER,GAAI,EACJF,KAAM,gBACNgB,SAAU,OACVf,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNgB,SAAU,YACVf,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNgB,SAAU,WACVf,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNgB,SAAU,WACVf,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNgB,SAAU,SACVf,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNgB,SAAU,mBACVf,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNgB,SAAU,eACVf,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNgB,SAAU,gBACVf,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNgB,SAAU,WACVf,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNgB,SAAU,iBACVf,MAAO,2BC5CIgB,EAbC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC1B,OACI,yBAAKhB,UAAU,OACX,2BACIA,UAAU,mCACViB,KAAK,QACLC,YAAY,gBACZC,SAAUH,MCEXI,EARF,SAACC,GACV,OACI,yBAAKrB,UAAU,YAAYC,MAAO,CAACqB,UAAU,SAASnB,OAAO,UACxDkB,EAAME,WCgCJC,G,wDA9BX,aAAc,IAAD,8BACT,gBAMJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CACVZ,YAAYW,EAAME,OAAOC,SAP7B,EAAKC,MAAM,CACHvB,OAAOA,EACPQ,YAAY,IAJX,E,qDAaJ,IAAD,OACEgB,EAAeC,KAAKF,MAAMvB,OAAO0B,QAAO,SAAA1B,GAC1C,OAAOA,EAAOV,KAAKqC,cAAcC,SAAS,EAAKL,MAAMf,YAAYmB,kBAErE,OACI,yBAAKlC,UAAU,MACX,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWgB,aAAcgB,KAAKP,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUlB,OAAQwB,U,GAvBpBK,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.48f16338.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card=({name,email,id})=>{\r\n    return(\r\n        <div className='bg-light-green dib br3 ma2 pa3 grow bw2 shadow-5' style={{width:'20%',height:'auto'}}>\r\n            <img alt='Robots' src={`https://robohash.org/${id}?200*200`}></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList=({robots})=>{\r\n    const cardComponent=robots.map((user,i)=>{\r\n        return (\r\n        <Card \r\n        key={i} \r\n        id={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email} />\r\n        );\r\n\r\n    })\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    )\r\n}\r\nexport default CardList","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\r\n\r\nconst SearchBox=({searchfield,searchChange})=>{\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='seach' \r\n                placeholder='Search Robots'\r\n                onChange={searchChange}\r\n                />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\nimport './index.css'\r\n\r\nconst Scroll=(props)=>{\r\n    return (\r\n        <div className='Scrollbar' style={{overflowY:'scroll',height:'520px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport CardList from './Cardlist';\r\nimport {robots} from './robot';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll'\r\n//import { getDefaultNormalizer, render } from '@testing-library/react';\r\nimport './App.css'\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n                robots:robots,\r\n                searchfield:''\r\n        }\r\n    }\r\n    onSearchChange = (event) =>{\r\n        this.setState({\r\n            searchfield:event.target.value\r\n        })\r\n        \r\n    }\r\n    render(){\r\n        const filteredRobots=this.state.robots.filter(robots=>{\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        return(\r\n            <div className='tc'>\r\n                <h1 className='f2'>Robo Friends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <CardList robots={filteredRobots}/>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport { robots } from './robot'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport CardList from './Cardlist';\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}